#!@GUILE@ --no-auto-compile
-*- scheme -*-
!#
;;; Copyright © 2016, 2017  Roel Janssen <roel@gnu.org>
;;; Copyright © 2017  Ricardo Wurmus <rekado@elephly.net>
;;; Copyright © 2017, 2018, 2023  Ludovic Courtès <ludo@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(set! %load-path
      (cons "@guilemoduledir@/modules" %load-path))
(set! %load-compiled-path
      (cons "@guileobjectdir@/modules" %load-compiled-path))

(use-modules (commonmark)
             (hpcweb-configuration)
             (gnu packages)
             (guix git)
             (guix diagnostics)
             (guix i18n)
             ((guix ui) #:select (string->number*))
             (guix scripts)
             ((guix channels) #:select (%default-channels))
             ((guix build utils) #:select (mkdir-p))
             (ice-9 match)
             (json)
             (rnrs bytevectors)
             (rnrs io ports)
             (srfi srfi-1)
             (srfi srfi-19)
             (srfi srfi-26)
             (srfi srfi-37)
             (sxml simple)
             (web request)
             (web response)
             (web server)
             (web uri)
             (www config)
             (www packages)
             (www pages error)
             (www pages javascript)
             (www pages package)
             (www pages channel)
             (www pages welcome)
             (www pages)
             (www util))

;; ----------------------------------------------------------------------------
;; HANDLERS
;; ----------------------------------------------------------------------------
;;
;; The way a request is handled varies upon the nature of the request.  It can
;; be as simple as serving a pre-existing file, or as complex as finding a
;; Scheme module to use for handling the request.
;;
;; In this section, the different handlers are implemented.
;;

(define (respond-404 config request)
  "Return 404 with a pretty HTML page."
  (values (build-response #:code 404
                          #:headers '((content-type . (text/html))))
          (with-output-to-string
            (lambda _
              (sxml->xml
               (page-error-404 (uri-path (request-uri request))
                               config))))))

(define (request-markdown-handler config request-path)
  (let ((file (string-append %www-markdown-root "/" request-path ".md")))
    (values
     '((content-type . (text/html)))
     (call-with-output-string
       (lambda (port)
         (set-port-encoding! port "utf8")
         (format port "<!DOCTYPE html>~%")
         (sxml->xml (page-root-template
                     (string-capitalize
                      (string-replace-occurrence
                       (basename request-path) #\- #\ ))
                     request-path
                     config
                     (call-with-input-file file
                       (lambda (port) (commonmark->sxml port))))
                    port))))))

(define (request-packages-json-handler config request)
  (let* ((packages-file (string-append %www-cache-root "/packages.json.gz"))
         (git-cache     (string-append %www-cache-root "/git"))
         (select?       (hpcweb-configuration-package-filter-proc config))
         (channels      (hpcweb-configuration-channels config))
         (expiration    (hpcweb-configuration-package-list-expiration config)))
    ;; Write the packages JSON to disk to speed up the page load.
    ;; This caching mechanism prevents new packages from propagating
    ;; into the search.  For this, we can manually create a file
    ;; "cache.timeout" in the %www-root.
    (parameterize ((%repository-cache-directory git-cache))
      (mkdir-p git-cache)
      (maybe-update-package-file packages-file channels
                                 #:expiration expiration
                                 #:select? select?))
    (request-file-handler config request)))

(define (request-file-handler config request)
  "This handler takes data from a file and sends that as a response."

  (define (response-content-type path)
    "This function returns the content type of a file based on its extension."
    (let ((extension (substring path (1+ (string-rindex path #\.)))))
      (cond [(string= extension "css")  '(text/css)]
            [(string= extension "js")   '(application/javascript)]
            [(string= extension "json") '(application/javascript)]
            [(string= extension "json.gz") '(application/javascript)]
            [(string= extension "html") '(text/html)]
            [(string= extension "png")  '(image/png)]
            [(string= extension "svg")  '(image/svg+xml)]
            [(string= extension "ico")  '(image/x-icon)]
            [(string= extension "pdf")  '(application/pdf)]
            [(string= extension "ttf")  '(application/font-sfnt)]
            [else '(text/plain)])))

  (define (get-bytevector-all* port)
    ;; Like 'get-bytevector-all', but always returns a bytevector.
    (match (get-bytevector-all port)
      ((? eof-object?)    #vu8())
      ((? bytevector? bv) bv)))
  (define path
    (uri-path (request-uri request)))

  (let* ((packages-json "/packages.json")
         (full-path (if (string= path packages-json)
                        (string-append %www-cache-root "/packages.json.gz")
                        (string-append %www-root "/" path)))
         (gzipped?  (string=? path packages-json))
         (file-stat (stat full-path #f))
         (modified  (and file-stat
                         (make-time time-utc
                                    0 (stat:mtime file-stat))))
         (ttl       (if (string-contains full-path "/static/")
                        (* 3600 24)               ;CSS and JS files
                        3600)))                   ;'packages.json'
    (define (send-file)
      ;; Do not handle files larger than %maximum-file-size.
      ;; Please increase the file size if your server can handle it.
      (if (> (stat:size file-stat) %www-max-file-size)
          (values (build-response #:code 404
                                  #:headers
                                  `((content-type . (text/html))))
                  (with-output-to-string
                    (lambda _
                      (sxml->xml (page-error-filesize
                                  path
                                  config)))))
          (values `((content-type . ,(response-content-type full-path))
                    ,@(if gzipped?
                          `((content-encoding . (gzip)))
                          '())
                    (last-modified . ,(time-utc->date modified))
                    (cache-control . ((max-age . ,ttl))))
                  (call-with-input-file full-path
                    get-bytevector-all*))))

    (cond ((not file-stat)
           (respond-404 config request))
          ((assoc-ref (request-headers request) 'if-modified-since)
           =>
           (lambda (client-date)
             ;; For /packages.json, which is quite big, it's a good idea to
             ;; honor 'If-Modified-Since'.
             (if (time>? modified (date->time-utc client-date))
                 (send-file)
                 (values (build-response #:code 304) ;"Not Modified"
                         #f))))
          (else
           (send-file)))))

(define (request-shtml-page-handler produce-page)
  "Return a procedure to handle requests for HTML page.  PRODUCE-PAGE is the
procedure called to produce the page SXML."
  (lambda (config path)
    (define ttl
      ;; Package pages won't change until the package list is rebuilt so add
      ;; reasonable time-to-live on them.
      (inexact->exact
       (quotient (hpcweb-configuration-package-list-expiration config) 2)))

    ;; Note: Use Content-Security-Policy to protect against "clickjacking"
    ;; attacks: <https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet>.
    (values `((content-type . (text/html))
              (content-security-policy . "frame-ancestors 'none';")
              (cache-control . ((max-age . ,ttl))))
            (call-with-output-string
              (lambda (port)
                (sxml->xml (produce-page path config) port))))))

(define request-package-handler
  (request-shtml-page-handler page-package))

(define request-channel-handler
  (request-shtml-page-handler page-channel))


(define %not-slash
  (char-set-complement (char-set #\/)))

(define (request-scheme-page-handler config request
                                     request-body request-path)
  (define welcome?
    ;; Should we land on the welcome page?
    (< (string-length request-path) 2))

  (define module
    (and (not welcome?)
         (match (string-tokenize request-path %not-slash)
           ((token)
            (false-if-exception
             (resolve-interface `(www pages ,(string->symbol token)))))
           (_ #f))))

  (if (or welcome? module)
      (values '((content-type . (text/html))
                (content-security-policy . "frame-ancestors 'none';"))
              (call-with-output-string
                (lambda (port)
                  (set-port-encoding! port "utf8")
                  (format port "<!DOCTYPE html>~%")
                  (if welcome?
                      (sxml->xml (page-welcome "/" config) port)
                      (let* ((function-symbol (string->symbol
                                               (string-map
                                                (lambda (x) (if (eq? x #\/) #\- x))
                                                (substring request-path 1))))
                             (page-symbol (symbol-append 'page-
                                                         function-symbol))
                             (display-function (module-ref module page-symbol)))
                        (sxml->xml (display-function request-path config)
                                   port))))))
      (respond-404 config request)))


;; ----------------------------------------------------------------------------
;; ROUTING & HANDLERS
;; ----------------------------------------------------------------------------
;;
;; Requests can have different handlers.
;; * Static objects (images, stylesheet, javascript files) have their own
;;   handler.
;; * Package pages are generated dynamically, so they have their own handler.
;; * The 'regular' Scheme pages have their own handler that resolves the
;;   module dynamically.
;;
;; Feel free to add your own handler whenever that is necessary.
;;
;; ----------------------------------------------------------------------------
(define (request-handler config request request-body)
  (define request-path
    (uri-path (request-uri request)))

  (match (request-method request)
    ('GET
     (cond ((string=? request-path "/packages.json")
            (request-packages-json-handler config request))
           ((string-prefix? "/static/" request-path)
            (request-file-handler config request))
           ((string-prefix? "/package/" request-path)
            (request-package-handler config request-path))
           ((string-prefix? "/channel/" request-path)
            (request-channel-handler config request-path))
           ((and (not (string= "/" request-path))
                 (access? (string-append %www-markdown-root "/"
                                         request-path ".md") F_OK))
            (request-markdown-handler config request-path))
           (else
            (request-scheme-page-handler config request
                                         request-body request-path))))
    (_
     ;; Nothing but GET is supported.
     (respond-404 config request))))


;; ----------------------------------------------------------------------------
;; RUNNER
;; ----------------------------------------------------------------------------
;;
;; This code runs the web server.

(define (run-web-interface config address family port)
  (define lock
    (string-append %www-cache-root "/packages.json.gz.lock"))

  (mkdir-p %www-cache-root)
  (false-if-exception (delete-file lock))
  (info (G_ "web page available at http://~a:~a/~%")
        (inet-ntop family address) port)

  (run-server (cut request-handler config <...>) 'http
              `(#:port ,port
                #:family ,family
                #:addr ,address)))

(define program-options
  (list (option '(#\V "version") #f #f
                (lambda _
                  (show-version)
                  (exit 0)))
        (option '(#\h "help") #f #f
                (lambda _
                  (show-help)
                  (exit 0)))

        (option '(#\p "port") #t #f
                (lambda (opt name arg result)
                  (alist-cons 'port (string->number* arg) result)))
        (option '("listen") #t #f
                (lambda (opt name arg result)
                  (let ((family (assoc-ref result 'family)))
                    (alist-cons 'address (inet-pton family arg) result))))
        (option '(#\4) #f #f
                (lambda (opt name arg result)
                  (alist-cons 'family AF_INET result)))
        (option '(#\6) #f #f
                (lambda (opt name arg result)
                  (alist-cons 'family AF_INET6 result)))

        (option '(#\c "config") #t #f
                (lambda (opt name arg result)
                  (alist-cons 'configuration-file arg result)))))

(define %default-options
  ;; Alist of default option values.
  `((address . ,INADDR_LOOPBACK)
    (family . ,AF_INET)
    (port . ,%www-listen-port)))

(define (show-help)
  (display "This is hpcguix-web.")
  (newline)
  (display "  --help         Show this message.")
  (newline)
  (display "  --version      Show versioning information.")
  (newline)
  (newline)
  (display "  --listen=ADDR  Listen to ADDR instead of localhost.")
  (newline)
  (display "  -4             Interpret ADDR as an IPv4 address.")
  (newline)
  (display "  -6             Interpret ADDR as an IPv6 address.")
  (newline)
  (display "  -p, --port=PORT Listen on PORT, a TCP port number.")
  (newline)
  (display "  --config=ARG   Load a site-specific configuration from ARG.")
  (newline))

(define (show-version)
  (display "@PACKAGE_NAME@ @PACKAGE_VERSION@\n"))

(define (load-in-user-module file)
  (let ((module (make-fresh-user-module)))
    (set-module-name! module '(hpcguix-web-user))
    (module-use-interfaces! module
                            (list (resolve-interface '(hpcweb-configuration))))
    (load file)))

(define (load-configuration file)
  "Load configuration from FILE and return it.  Exit with an error message
upon failure."
  (catch 'system-error
    (lambda ()
      (match (load-in-user-module file)
        ((? hpcweb-configuration? config) config)
        (_
         (leave (G_ "'~a' did not return an 'hpcweb-configuration' record~%")
                file))))
    (lambda args
      (leave (G_ "~a: failed to load configuration: ~a~%")
             file (strerror (system-error-errno args))))))

(let* ((options (parse-command-line (cdr (command-line)) program-options
                                    (list %default-options)
                                    #:build-options? #f))
       (config-file (assoc-ref options 'configuration-file))
       (config      (if config-file
                        (load-configuration config-file)
                        (hpcweb-configuration))))
  (setvbuf (current-output-port) 'line)
  (setvbuf (current-error-port) 'line)
  (run-web-interface config (assoc-ref options 'address)
                     (assoc-ref options 'family)
                     (assoc-ref options 'port)))
